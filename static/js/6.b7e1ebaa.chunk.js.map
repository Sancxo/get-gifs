{"version":3,"sources":["routes.js","components/gifs/GifDetails.js","components/gifs/Gif.js","components/RandomGif.js"],"names":["key","routes","getTop20","getSearch","query","offset","getRandom","upload","GifDetails","element","open","handleClose","user","username","Fragment","href","profile_url","target","rel","className","alt","id","src","avatar_url","source","title","Dialog","onClose","DialogTitle","DialogActions","style","border","background","onClick","DialogContent","DialogContentText","url","images","original","rating","Gif","useState","setOpen","width","height","objectFit","RandomGif","error","setError","isLoaded","setIsLoaded","data","setData","getData","fetch","then","res","json","result","useEffect","gifTitle","message"],"mappings":"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","file":"static/js/6.b7e1ebaa.chunk.js","sourcesContent":["/* API routes to fetch different stuff */\r\n\r\nconst key = \"7CnQwmmmyzdPxKtpT93N9IIm4Q17rBLs\";\r\n\r\nconst routes =  {\r\n    getTop20: `https://api.giphy.com/v1/gifs/trending?api_key=${key}&limit=20`,\r\n    getSearch: (query, offset) => { return `https://api.giphy.com/v1/gifs/search?api_key=${key}&q=${query}&offset=${offset}` },\r\n    getRandom: `https://api.giphy.com/v1/gifs/random?api_key=${key}`,\r\n    upload: \"upload.giphy.com/v1/gifs\"\r\n}\r\n\r\nexport default routes;","import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nconst GifDetails = ({element, open, handleClose}) => {\r\n\r\n    const userLink = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <a href={element.user.profile_url} target=\"_blank\" rel=\"noreferrer noopener\">\r\n                    { element.username }\r\n                </a> \r\n                <a href={element.user.profile_url} target=\"_blank\" rel=\"noreferrer noopener\">\r\n                    <img className=\"m-3 rounded-circle\" alt=\"avatar\" id=\"avatar\" src={element.user.avatar_url} />\r\n                </a> \r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    // If some elements are not availables\r\n    const user = element.username ? userLink() : \"Anonym\";\r\n    const source = element.source ? <a href={element.source} target=\"_blank\" rel=\"noreferrer noopener\">Source</a> : \"No source available.\";\r\n    const {title} = element ? element : \"Untitled\";\r\n\r\n    return (\r\n        // Material UI Dialog Box\r\n        <Dialog open={ open } onClose={ handleClose }>\r\n\r\n            <div id=\"dialog-ctn\">\r\n\r\n                {/* Head */}\r\n                <div id=\"dialog-head\" className=\"d-flex justify-content-between\">\r\n                    <DialogTitle>{ title }</DialogTitle>\r\n                    <DialogActions>\r\n                        <button style={{ border: 'none', background: 'none' }} onClick={ handleClose }>X</button>\r\n                    </DialogActions>\r\n                </div>\r\n\r\n                {/* Body */}\r\n                <DialogContent id=\"dialog-body\">\r\n                    <DialogContentText className=\"d-flex flex-column align-items-center\">\r\n                        <a href={ element.url } target=\"_blank\" rel=\"noreferrer noopener\">\r\n                            <img src={ element.images.original.url }  alt='Gif' className=\"mb-3\"/>\r\n                        </a>\r\n                        <ul className=\"list-unstyled d-flex flex-column align-items-center flex-wrap\">\r\n                            <li className=\"text-center\"><a href={ element.url } target=\"_blank\" rel=\"noreferrer noopener\">{ element.url }</a></li>\r\n                            <li>Rating : { element.rating }</li>\r\n                            <li>Creator : { user }</li>\r\n                            <li>{ source }</li>\r\n                        </ul>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                \r\n            </div>\r\n\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default GifDetails;","import { useState } from \"react\";\r\nimport GifDetails from \"./GifDetails\";\r\n\r\nconst Gif = ({element}) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleOpen = () => { setOpen(true); }\r\n    const handleClose = () => { setOpen(false); }\r\n\r\n    return(\r\n        <div>\r\n            \r\n            {/* Gif Image */}\r\n            <button key={ element.id } style={{ border: 'none', background: 'none' }} onClick={ handleOpen }>\r\n                <li><img src={ element.images.original.url } alt='Gif' key={ element.id } style={{ width: '18rem', height: '18rem', objectFit: 'cover'}} /></li>\r\n            </button>\r\n\r\n            {/* Dialog box /w Gif details */}\r\n            <GifDetails element={ element } open={ open } handleClose={ handleClose } />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gif;","import { useEffect, useState } from \"react\";\r\nimport routes from \"../routes\";\r\nimport Gif from \"./gifs/Gif\";\r\n\r\nconst RandomGif = () => {\r\n    // Fetch Data\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [data, setData] = useState([]);\r\n\r\n    const getData = () => {\r\n        fetch(routes.getRandom)\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                setData(result.data);\r\n                setIsLoaded(true);\r\n            },\r\n            (error) => {\r\n                setError(error);\r\n                setIsLoaded(true);\r\n            }\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    }, [])\r\n    // End of Fetch\r\n\r\n    // If some elements are not availables\r\n    const gifTitle = data.title ? data.title : \"Untitled\";\r\n    const user = data.username ? data.username : \"Anonym\";\r\n\r\n    if(error) {\r\n        return <div>Erreur : { error.message }</div>;\r\n    } else if (!isLoaded) {\r\n        return <div>Loading ...</div>\r\n    } else {\r\n        return (\r\n            <div>\r\n                {/* Refresh Button */}\r\n                <button className=\"btn btn-secondary mb-3\" onClick={ getData }>Another one, please.</button>\r\n\r\n                {/* Bootstrap Card */}\r\n                <div className=\"d-flex justify-content-center mt-3\">\r\n                    <div className=\"card\" style={{width: '18rem'}}>\r\n                        <ul className=\"list-unstyled d-flex flex-wrap justify-content-center\" >\r\n                            <Gif element={ data } key={ data.id } /> \r\n                        </ul>\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">{ gifTitle }</h5>\r\n                            <p className=\"card-text\">{ user }</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RandomGif;"],"sourceRoot":""}