{"version":3,"sources":["components/template/SearchBar.js","components/template/Header.js","components/App.js","reportWebVitals.js","index.js"],"names":["SearchBar","history","useHistory","type","className","onSubmit","query","document","getElementById","value","push","id","name","placeholder","to","Header","useState","darkMode","setDarkMode","useEffect","json","localStorage","getItem","JSON","parse","setAttribute","removeAttribute","body","classList","add","remove","stringify","setItem","onClick","htmlFor","TrendingGifs","lazy","SearchPage","RandomGif","App","basename","fallback","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"qOAsBeA,EApBG,WAEd,IAAMC,EAAUC,cAMhB,OACI,uBAAMC,KAAK,SAASC,UAAU,mBAAmBC,SANpC,WACb,IAAIC,EAAQC,SAASC,eAAe,SAAWD,SAASC,eAAe,SAASC,MAAQ,GACxFR,EAAQS,KAAR,wBAA8BJ,KAI9B,UAEI,uBAAOK,GAAG,QAAQC,KAAK,QAAQR,UAAU,6BAA6BS,YAAY,wBAClF,uBAAOV,KAAK,SAASM,MAAM,cAAcL,UAAU,2BAGnD,cAAC,IAAD,CAAMA,UAAU,gCAAgCU,GAAG,UAAnD,2BCkCGC,EA/CA,WAEX,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KA2BA,OAzBAC,qBAAU,WAEN,IAAMC,EAAOC,aAAaC,QAAQ,gBACdC,KAAKC,MAAMJ,IAE/BF,GAAY,GACZX,SAASC,eAAe,0BAA0BiB,aAAa,WAAW,KAE1EP,GAAY,GACZX,SAASC,eAAe,0BAA0BkB,gBAAgB,cAEnE,IAEHP,qBAAU,WACHF,EACHV,SAASoB,KAAKC,UAAUC,IAAI,YAE5BtB,SAASoB,KAAKC,UAAUE,OAAO,YAG/B,IAAMV,EAAOG,KAAKQ,UAAUd,GAC5BI,aAAaW,QAAQ,eAAgBZ,KACtC,CAACH,IAIA,yBAAQb,UAAU,aAAlB,UAGI,sBAAKO,GAAG,mBAAmBP,UAAU,kDAArC,UACI,uBAAOA,UAAU,mBAAmBD,KAAK,WAAWQ,GAAG,yBAAyBsB,QAAS,kBAAMf,GAAaD,MAC5G,uBAAOb,UAAU,mBAAmB8B,QAAQ,yBAA5C,gCAIJ,2CACA,cAAC,IAAD,CAAMpB,GAAG,IAAIV,UAAU,OAAvB,kBACA,cAAC,EAAD,QCvCN+B,EAAeC,gBAAK,kBAAM,sDAC1BC,EAAaD,gBAAK,kBAAM,sDACxBE,EAAYF,gBAAK,kBAAM,sDAsBdG,MApBf,WAEE,OACE,qBAAKnC,UAAU,MAAf,SAEE,eAAC,IAAD,CAAQoC,SAAS,YAAjB,UACE,cAAC,EAAD,IACA,cAAC,WAAD,CAAUC,SAAU,6CAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYT,IAClC,cAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,UAAUC,UAAYP,IACxC,cAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,UAAUC,UAAYN,eCTrCO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKdQ,IAASC,OACL,cAAC,EAAD,IACFhD,SAASC,eAAe,SAM1BqC,M","file":"static/js/main.7bde3e28.chunk.js","sourcesContent":["import { useHistory, Link } from \"react-router-dom\";\n\nconst SearchBar = () => {\n    // Single Page Application Search\n    const history = useHistory();\n    const onSubmit = () => {\n        let query = document.getElementById(\"query\") ? document.getElementById(\"query\").value : \"\";\n        history.push(`/search?query=${query}`);\n    };\n\n    return (\n        <form type=\"search\" className=\"w-25 my-3 d-flex\" onSubmit={onSubmit}>\n            {/* Search Bar */}\n            <input id=\"query\" name=\"query\" className=\"form-control flex-shrink-0\" placeholder=\"Search for Gifs ...\" />\n            <input type=\"submit\" value=\"Go for Gifs\" className=\"btn btn-secondary mx-1\" />\n            \n            {/* Random Button */}\n            <Link className=\"btn btn-secondary text-nowrap\" to=\"/random\">Get Lucky</Link>\n        </form>\n    )\n}\n\nexport default SearchBar;","import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"./SearchBar\";\n\nconst Header = () => {\n    // Dark mode functionnality\n    const [darkMode, setDarkMode] = useState(false);\n\n    useEffect(() => {\n        // We check in local storage if the user has selected Dark Mode or not\n        const json = localStorage.getItem(\"go-dark-mode\");\n        const currentMode = JSON.parse(json);\n        if(currentMode) {\n        setDarkMode(true);\n        document.getElementById('flexSwitchCheckDefault').setAttribute('checked', true);\n        } else {\n        setDarkMode(false);\n        document.getElementById('flexSwitchCheckDefault').removeAttribute('checked');\n        }\n    }, [])\n\n    useEffect(() => {\n        if(darkMode) {\n        document.body.classList.add(\"darkMode\");\n        } else {\n        document.body.classList.remove(\"darkMode\");\n        }\n        // We write in local storage the user's choice about Dark Mode\n        const json = JSON.stringify(darkMode);\n        localStorage.setItem(\"go-dark-mode\", json);\n    }, [darkMode])\n    // End of dark Mode functionnality\n\n    return (\n        <header className=\"App-header\">\n\n            {/* DarkMode Switch */}\n            <div id=\"dark-mode-switch\" className=\"form-check form-switch fs-6 align-self-end me-3\">\n                <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={() => setDarkMode(!darkMode)}/>\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Light/Dark mode</label>\n            </div>\n\n            {/* Header */}\n            <h1>Get Gifs.</h1>\n            <Link to=\"/\" className=\"fs-5\">Home</Link>\n            <SearchBar />\n            \n        </header>\n    )\n}\n\nexport default Header;","import React, { Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport '../style/App.css';\nimport Header from './template/Header';\n\nconst TrendingGifs = lazy(() => import('./TrendingGifs'));\nconst SearchPage = lazy(() => import('./SearchPage'));\nconst RandomGif = lazy(() => import('./RandomGif'));\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n\n      <Router basename='/get-gifs'>\n        <Header />\n        <Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            <Route exact path=\"/\" component={ TrendingGifs } />\n            <Route exact path=\"/search\" component={ SearchPage } />\n            <Route exact path=\"/random\" component={ RandomGif } />\n          </Switch>\n        </Suspense>\n      </Router>\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport '@material-ui/core';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@popperjs/core';\nimport './style/index.css';\n\nimport App from './components/App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}